# jemdoc: menu{MENU}{nircm.html}

#
# this is a working document for <N>ear <I>nfra <R>ed <C>ontactless <M>onitoring
#

= Nexys3 -- NIR videos and spatio-temporal information processing

== Nexys3 -- boards and vhdl basics

~~~
Device : xc6slx16-csg324-3 \n
SPI bus-width should be +4+ ?
~~~

=== How to program?
~~~
{}{bash}
$ djtgcfg prog -f top.bit -d Nexys3 -i 0
~~~

=== Learn the VHDL +for+, +if+, +generate+, syntax:
~~~
{}{vhdl}
btn_debounce_for : for i in 0 to 4 generate
   UBTN : btn_debounce port map(clkin,gpio_btn(i),btn_internal(i));
end generate btn_debounce_for;
~~~

+for+ -- +generate+ loop also supports +process+, and moreover, it supports nested +if+ -- +generate+ statement,
~~~
{}{vhdl}
led_for : for i in 0 to 4 generate
    p_led_latch : process(clkin) is
    begin
        if rising_edge(clkin) then
            if btn_internal(i)='1' then
                led_internal(i) <= not led_internal(i);
            end if;
        end if;
    end process p_led_latch;
    gpio_led(i) <= led_internal(i);
end generate led_for;
~~~

We may also infer combinational logic use +with+ -- +select+ clause,
~~~
{}{vhdl}
with seg select
    bcd <= "10001110" when "1111";
           "11111111" when others;
~~~

= NIR on Nexys3 -- connect mt9v034 with dual--pmods

== NIR -- the hardware

*MT9V034 :* \n
Look from top-down, on the camera side.
~~~
{}{table}{mt9v034 pin configuration}
*12* | *11* | *10* | *9* | *8* | *7* | *6* | *5* | *4* | *3* | *2* | *1* ||
 D1 | PCK | D3 | LED | SDA | FRV | D9 | C\_P | D\_P | D8 | D6 | *VCC* ||
 D2 | D0 | XCK | D4 | SCK | EXP | LIV | C\_N | D\_N | D7 | D5 | *GND* ||
*13* | *14* | *15* | *16* | *17* | *18* | *19* | *20* | *21* | *22* | *23* | *24*
~~~

where +D0+, +D1+ and +C\_P+, +C\_N+, +D\_P+, +D\_N+ are NC.

*Pmod C :* (GND and VCC are more closer to the boards)
~~~
{}{table}{NIR Pin set -- J4}
*7* | *8* | *9* | *10* | *11* | *12* ||
 FRV | D9 | D8 | D6 | *GND* | *VCC* ||
 EXP | LIV | D7 | D5 | - | - ||
*1* | *2* | *3* | *4* | *5* | *6*
~~~

*Pmod B :* (GND and VCC are more closer to the boards)
~~~
{}{table}{NIR Pin set -- J4}
*7* | *8* | *9* | *10* | *11* | *12* ||
 LED | D3 | *XCK* | *PCK* | *GND* | *VCC* ||
 D2 | SDA | D4 | SCK | - | - ||
*1* | *2* | *3* | *4* | *5* | *6*
~~~

*Note:* we should place *clk* pins on GCLK sites, where +C-1 (H3)+, +B-9 (K3)+, +B-10 (K5)+. We wrap B9 and B10 to *XCK* and *PCK*. And we add insulate via Tin foil (锡铂纸).

We wire (where FPGA is the master)
~~~
{}{table}{ucf definition}
*Port* | *MT9V034-devboard* | *IO (FPGA is the master)* | *Annotation* ||
DCMI\_SYS\_CLK | XCK | Output | *system clock* ||
DCMI\_CLK | PCK | Input | *Data clock* ||
DCMI\_EXP | EXP | Output | *Exposure* ||
DCMI\_DATA<7:0> | D9 -- D2 | Input | *Data* ||
DCMI\_HSYNC | LIV | Input | *Line valid* ||
DCMI\_VSYNC | FRV | Input | *Frame valid* ||
DCMI\_LED | LED | Input | ||
DCMI\_SCK | SCK | Inout *(pullup)* | ||
DCMI\_SDA | SDA | Inout *(pullup)* |
~~~

~~~
By comparing PX4Flow and the MT9v034 taobao board, we found some common connections, +OE+ (active HIGH) tied to VCC, +RSVD+ tied to GND. +BYPASS\_CLKIN\_P+ and +SER\_DATAIN\_P+ are tied to GND, while +BYPASS\_CLKIN\_N+ and +SER\_DATAIN\_N+ are tied to VCC with 1k Ohm pull-up resistor.

However, for MT9v034-dev, the +STANDBY+ is tied to GND, and the +RESET\_N+ is tied to VCC with 10k Ohm pull-up resistor. For PX4Flow, these two pins are controlled by MCU. For mt9v034-dev, +SCTRL\_ADDR0+ and +SCTRL\_ADDR1+ are tied to GND, while for PX4Flow, these pins are tied to VCC.

These two boards works in master mode, with steroscopy mode disabled. +SCK+ and +SDA+ should be pulled-up with 1.5K Ohm resistors when no other I2C peripheral is connected.
~~~

== NIR -- boot mt9v034 via nexys3

In principles, the mt9v034 works +output wide-VGA image at 60fps+ by default.

~~~
By injecting +DCMI\_SYS\_CLK+ with 25MHz clock input, and trigger +DCMI\_EXP+ with a rising-edge sensitive pulse (*1000* cycles duty period, in snapshot or slave mode; in master mode, +DCMI\_EXP+ may tie to GND). We may monitor the +DCMI\_DATA+ bus, +DCMI\_HSYNC+ and +DCMI\_VSYNC+ signals, as well as +DCMI\_LED+ pins.

+DCMI\_VSYNC+ is HIGH valid during the whole imaging process (a frame), +DCMI\_HSYNC+ is periodorically HIGH valid. The image format is *752x480*. However, currently +DCMI\_CLK+ could not register exactly +752+ datum each *HSYNC* pules. /(need debug this)/. Strange, +DCMI\_CLK+ may be *26.6*MHz PLL locked even if we inject a *25*MHz +DCMI\_SYS\_CLK+.
~~~

== NIR -- the wrapper of i2c\_io\_16bit.vhd

With +ADDR0+ and +ADDR1+ pins pulled low on mt9v034-dev, the address is +0x48+, with the last bit denotes write ('0') or read ('1'). Therefore, the mt9v034 board has +0x90+ for *write*, +0x91+ for *read*. We build dedicated module +i2c\_io\_16bit.vhd+ to handle the *Read\/Write* process to MT9v034.

~~~
{}{table}{mt9v034 IO}
 0x90 (0x91) | REG\_ADDRESS | WB1 (RB0) | WB2 (RB0)
~~~

for example, +0x90070188+ *write* 0x0188 to 0x07 in mt9v034, +0x9107XXXX+ *read* DBYTE from 0x07 in mt9v034.

~~~
As a simple rule-of-the-thumb, we may put +0x91000000+ on data bus, trigger +data\_stream\_in\_stb+, and read out the content of +0x00+ on mt9v034 by acknowledge +data\_stream\_out\_stb+, and finally put the register (which is the CHIPID, +0x1324+) on BCD segment display.
~~~

Another simple example is command +0x900400FF+, which changes the +WINDOW\_WIDTH+ to *256*, this can also be verified via Chipscope.

== NIR -- config mt9v034 (copied from px4flow)

After testing the *R\/W* functionality of +i2c\_io\_16bit.vhd+, we next store all the command and registers in the +mt9v034.coe+, and loaded in a rom to config this camera module. The top module, which is called +mt9v034.vhd+, embedded the *mt9v034.coe*, sequentially read the content out, and config the device via I2C protocol.

We port the source code *mt9v034.c* in PX4Flow to NIR project, (*Context A*, context, is like a fast stack-switch machanism, context B in PX4Flow is used for videos streaming only, while context A is for practical optical flow calculation).

*Context A\/B*
~~~
{}{table}{mt9v034.c}
 *Register* | *Name* | *Default* | *Context A (Context B)* | *COMMAND* | *Annotation* ||
 0x07 | Chip Control | 0x0388 | 0x0188 (0x8188) | 90070188 | *0x0088* ||
 0x03 (OxCB) | WINDOW\_HEIGHT | 480 | 64\*4 (120\*4) | 90030100 | 4-binning ||
 0x04 (0xCC) | WINDOW\_WIDTH | 752 | 64\*4 (188\*4) | 90040100 | ||
 0x05 | Hor Blanking | 4 \+ 91 | (752 - 64\*4) \+ 91 | 9005024B | ||
 0x06 | Ver Blanking | 45 | 10 | 9006000A | ||
 0x0D (0x0E) | Read Mode | 0x300 | 0x30A (0x305) | 900D030A | row bin-4, col bin-4 ||
 0x01 | Column Start | 1 | (752 - 64\*4)\/2 \+ 1 | 900100F9 | Center Window ||
 0x02 | Row Start | 4 | (480 - 64\*4)\/2 \+ 4 | 90020074 | ||
 0x08 | Coarse Shutter Width 1 | | | 900801BB | ||
 0x09 | Coarse Shutter Width 2 | | | 900901D9 | ||
 0x0A | Coarse Width Control   | | | 900A0164 | ||
 0x0B | Coarse Width Total     | | | 900B01E0 |
~~~

*General Settings*
~~~
{}{table}{mt9v034.c section2}
 *Register* | *Name* | *Default* | *Context A (Context B)* | *COMMAND* | *Annotation* ||
 0x70 | Row Noise Corr | 0 | 0x0000 | 90700000 | ||
 0xAF | AEC\/AGC Enable | 0x3 | 0x0303 | 90AF0303 | ||
 0x0F | HDR | 0x0100 | 0x0000 | 900F0000 | ||
 0xAC | Min exposure | 1 | 1 | 90AC0001 | ||
 0xAD | Max exposure | 0x01E0 | 0x80 | 90AD0050 | ||
 0xAB | Max gain | 0x40 (64) | 0x40 (64) | 90AB0040 | ||
 0xB0 | AEC\/AGC Pixel Count | 0xABE0 | 0x1000 (4096) | 90B01000 | ||
 0xA5 | AEC\/AGC Desired Bin | 0x3A | 0x32 (50) | 90A50032 | ||
 0x1C | ADC Res Control | 0x0302 | 0x0202 | 901C0202 | ||
 0x7F | Test pattern | 0x0000 | 0x0000 | 907F0000 | ||
 0xA6 | AEC update Freq | 0x2 | 0x2 | 90A60002 | ||
 0xA8 | AEC lowpass Filter | 0x0 | 0x1 | 90A80001 | ||
 0xA9 | AGC update Freq | 0x2 | 0x2 | 90A90002 | ||
 0xAA | AGC lowpass Filter | 0x2 | 0x2 | 90AA0002 |
~~~

*finally, reset*
~~~
{}{table}{mt9v034.c section2}
 *Register* | *Name* | *Default* | *Context A (Context B)* | *COMMAND* | *Annotation* ||
 0x0C | Reset | | | 0x900C0001 | ||
 0x00 | Chip ID | | | 0x91000000 | *read back*
~~~

The rom is a simplified form of PX4flow, where we may add more functionality with different configurations of switches.

