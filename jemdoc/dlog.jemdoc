# jemdoc: menu{MENU}{dlog.html}

= High-speed full duplex data logging from FPGA to PC

Most of the time, we collected large amount of data using FPGA and on-chip ADCs, and want sent them direct to PC. Only standard peripherals can be used. Some protocols may bump to our mind, for example, Bluetooth 2.1 (BLE is too slow for data logging), RS232 (where most of the time, we will use CP2102 to convert a serial interface to USB, and utilize the ttyUSBx on PC), wifi and ethernet. Among all these options, UART is the best. It is simple, utilize little FPGA on-chip resources, and the data can be logged in raw format. Most important, I had success with this protocol.

Transparent data transfer using RS232 via bluetooth or wifi, or even ethernet are now available. However, we had this problem : how could we transfer data from FPGA to PC, in high-speed, long-distance, and best of all, with little or no dirty work on excessive complex state machines?

== Ethernet

The commercial IP core (Xilinx Tri-MAC) is a complete implementation of a MAC layer. The lx9 microboard has an National Semiconductor DP83848J Phy layer and Tyco RJ45 connector. I found designs which directly use the LVDS pins on FPGA to implement the 10BASE-T protocol (MAC \+ PHY all in FPGA):

  . [http://www.punk.co.nz/2013/03/07/crafting-a-basic-ethernet-mac-and-10base-t-phy/]
  . [http://www.fpga4fun.com/10BASE-T.html]
  . [http://midir.fi/?i=ktvwn44y&la=en]

and some publicity available code (small state machines) on interfacing with a PHY device. Our targeting PHY interface *DP83848J* might be used in this way, so check out:

  . [http://forums.xilinx.com/t5/Spartan-Family-FPGAs/UDP-IP-stack-on-a-Spartan-6/td-p/149492]
  . [http://www.joelw.id.au/FPGA/DigilentAtlysResources]
  . [http://people.ece.cornell.edu/land/courses/ece5760/FinalProjects/f2011/mis47_ayg6/mis47_ayg6/]
  . [https://www.deyisupport.com/question_answer/dsp_arm/sitara_arm/f/25/t/45981.aspx] In Chinese

An GMAC on opencore.org (I do not like opencores as I had little success in using that website)

  . [http://opencores.org/project,ethernet_tri_mode]

Some discussions indicated that, it may not be a wise choice to use FPGA to negotiate with the ethernet protocol, the best choice is a microcontroller.

  . [http://www.eevblog.com/forum/microcontrollers/open-(functional!)-core-for-ethernet-vhdl-for-ethernet-spartan-6/?PHPSESSID=f6f35063e39f50fd4818c8ba811cac6f Topic: Open (functional!) core for Ethernet / VHDL for Ethernet - Spartan 6?  (Read 3120 times)]

as I only had a spartan6 FPGA, a softcore (lattice8 or lattice32, Microblaze) is my third (last) choice.

== USB-3

How about the newly introduced USB-3 ? Is it suit for this application ?

== Softcores

If crafting an PHY \+ MAC \+ IP protocol is not your *job*, then simply using one softcore with light IP stack.


