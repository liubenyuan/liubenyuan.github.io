# jemdoc: menu{MENU}{nrf51822.html}, nofooter

= NRF51822 -- Cortex-M0 + BLE stack

# {}{where it is}{img file}{alt text}{Width}{Height}{}
~~~
{}{img_left}{pics/nrf51822ak.jpg}{NRF51822 AK II Board}{300px}{}{}

左边就是我们的NRF51822 AK--II开发板！可以在[http://nrf51.taobao.com NRF51淘宝店]或者[http://www.nrf51.com NRF51开发者论坛]上购买。与nrf51822 DK(EK)不同的是，这个板子不自带jlink调试器，因此，我们需要购买jlink V8调试器来开发和调试程序。另外，尤为重要的是，我们可以将nrf51822理解成，+搭载BLE蓝牙外设的Cortex-M0开发板+ ：）

我们开发的环境是Linux，其方便之处是可以使用gcc cross toolchain开发环境和Makefile。比较官方提供的keil \+ nrf51822 SDK \+ nrfgo的开发环境，其优点是自如，可以集成到任何使用makefile的IDE中去。下面，我们一步一步的讲解如何建立linux下的Makefile template。 *So, Let's Start!*
~~~

== 1. jlink -- FLASH的擦写
从官方网站[http://www.segger.com/jlink-software.html?step=1&file=JLinkLinuxTGZ64_480]下载最新的Jlink程序，然后

~~~
\$ tar -xvf JLink\_Linux\_V480.tgz
\$ cd JLink\_Linux\_V480
\$ sudo cp 99-jlink.rules \/etc\/udev\/rules.d\/
\$ cd ..
\$ sudo mv JLink\_Linux\_V480 \~\/bin\/jlink
~~~

我们将jlink安装在了个人目录的bin目录下。安装完成后，需要重新连接jlink调试器，然后运行*JLinkExe*就会看到自动更新固件的信息以及链路上的设备信息，在这里应该是Cortex-M0。在后面的Makefile中，我们需要设定 *PROG\_ROOT* 为
~~~
PROG_ROOT = \$(HOME)\/bin\/jlink
~~~

== 2. arm-none-eabi-\{gcc,binutils,gdb\} -- cross toolchain 编译环境

我们需要在linux下用交叉编译工具生成cortex-M0可执行代码。这一步很简单，可以使用官方的arm-none-eabi，或者使用mentor的*sourcery codebench*的最新的交叉编译程序。

这里，我们选择是使用archlinux提供的ARM交叉编译工具，见[https://launchpad.net/gcc-arm-embedded]，直接用pacman安装好*arm-non-eabi-\{gcc,gdb,binutils\}*包即可。然后我们需要设定 *GNU\_INSTALL\_ROOT* :
~~~
GNU\_INSTALL\_ROOT := \/usr
GNU\_VERSION := 4.9.0
GNU\_PREFIX := arm-none-eabi
~~~

== 3. Nordic nrf51822 SDK
我们可以下载最新的nrf51822的SDK，以及nordic的 +s110+, +s120+ softdevice（类比FPGA中的说法，我们可以称softdevice为有*API的软核*）。如果你购买的是nrf51822 AK开发板，那么可以去[http://www.nrf51.com nrf51论坛]下载。假定他们都放在了*$(HOME)/bin*目录下，那么需要设定好 *SDK\_PATH* 和 *SOC\_PATH* :
~~~
SDK\_PATH := \$(HOME)\/bin\/nrf51\_sdk\_v5\_2\_0\_39364\/Nordic\/nrf51822\/
SOC\_PATH := \$(HOME)\/bin\/nrf51\_softdevice\/
~~~
这样，+s110+, +s120+ 等软核的hex文件都位于 *SOC\_PATH* 下面。

== ARM 开发初探 (you may skip this section)

作为一个新手，我对启动开发Cortex-M0加蓝牙的程序是很茫然的，我先前的所有经验都是在FPGA和ADSP上进行开发。现在，我们要一步的迁移到交叉编译环境加ARM与蓝牙上面。所幸，网上有很多相当优秀的教程，我列以下两个：

. 这个博客 [http://cms.mcuapps.com/tooltips/tt0004 mcuapps博客]
. 以及这个大牛 [http://balau82.wordpress.com/category/software/embedded-software balau82的博客]

=== Balau82的博客集锦

我们首先阅读Balau82的博客获取一些基础知识。

[http://balau82.wordpress.com/2010/02/14/simplest-bare-metal-program-for-arm/ Simplest bare metal program for ARM]. Bare Metal (裸机) 程序是无需操作系统即可运行的程式。学习裸机程序对于理解硬件架构以及操作系统的底层都很有帮助。我们在安装好arm-none-eabi工具( none 即为*bare metal*的含义)后，将arm-none-eabi-\*添加到系统可执行路径中即可。

~~~
{}{img_left}{pics/balau82_20100214.png}{ARM bare metal}{400px}{}{}

nrf51822 AK开发板可以看作是cortex-M0架构下最小的开发板。最基本的源代码包括*test.c*，启动代码*startup.s*，链接配置*test.ld*。相应的交叉编译工具也可以在图中找到。 +启动代码+ 最基本的功能就是在程序初始化端口，屏蔽中断，映射程序。 +链接配置+ 则包含text，data以及堆栈的位置，或者说 /tells the linker where different memory sections map into real, physical memory on the chip/
~~~

[http://balau82.wordpress.com/2010/02/28/hello-world-for-bare-metal-arm-using-qemu/ Hello world for bare metal ARM using QEMU]. 我们可以用qemu和arm-none-eabi-gdb来调试程序。在这里，我们还是使用上面test.c的例子。运行

~~~
\$ arm-none-eabi-as -mcpu=arm926ej-s -g startup.s -o startup.o
\$ arm-none-eabi-gcc -c -mcpu=arm926ej-s -g test.c -o test.o
\$ arm-none-eabi-ld -T test.ld test.o startup.o -o test.elf
\$ arm-none-eabi-objcopy -O binary test.elf test.bin
\$ qemu-system-arm -M versatilepb -m 128M -nographic -s -S -kernel test.bin
~~~

随后在另一个终端中该目录下（需要有test.elf），
~~~
\$ arm-none-eabi-gdb
(gdb) target remote localhost:1234
(gdb) file test.elf
(gdb) b c\_entry
(gdb) continue
(gdb) set \$pc=0
(gdb) stepi
~~~
需要退出qemu的仿真，可以Ctrl+a, x。

[http://balau82.wordpress.com/2011/09/03/using-codesourcery-bare-metal-toolchain-for-cortex-m3/ Using CodeSourcery bare metal toolchain for Cortex-M3]. 之前的交叉编译的例子都是基于arm926ej-s，balau在本文中提供了针对cortex-m3的例子。Bare metal程式最大的用处是在MCU上，我直接复制了例子中的文件并且制作了makefile，在qemu上仿真一切OK，源代码可见 main.c, syscalls.c, reset.S, lm3s6965.ld 。

~~~
\$ alias gcc-cortex-m3='arm-none-eabi-gcc -mthumb -march=armv7 -mfix-cortex-m3-ldrd'
\$ gcc-cortex-m3 -c main.c -o main.o
\$ gcc-cortex-m3 -c reset.S -o reset.o
\$ gcc-cortex-m3 -c syscalls.c -o syscalls.o
\$ gcc-cortex-m3 -T lm3s6965.ld main.o reset.o syscalls.o -o main.elf
\$ arm-none-eabi-objcopy -O binary main.elf main.bin
\$ qemu-system-arm -M lm3s6965evb --kernel main.bin --serial stdio
~~~

我们也可以直接一步编译生成main.elf
~~~
\$ gcc-cortex-m3 -T lm3s6965.ld main.c reset.S syscalls.c -o main.elf
~~~

随后我们还要 (1)~检查程序大小，(2)~初始化向量表（湾湾的称呼为*序列埠*，很有意思），以及(3)~用MCU官方的工具对Flash进行擦写。问题是：针对cortex-m0的开发，我们需要怎样做呢？

== 4. template for nrf51822

可以从[https://github.com/liubenyuan/nrf51822-makefile nrf51822-makefile @ github]下载linux下nrf51822的Makefile，需要注意，当前测试的工作环境是：
- JLinkExe 4.80 (from segger.com)
- arm-none-eabi-gcc 4.9.0 (via pacman)
- nrf51822 SDK v5.2.0 39364 (official)
- s110 6.0.0-5 beta, s120 0.8.0-3 alpha

我们只需将makefile（包括 Makefile, Makefile.config ）放到正确的位置上即可，如对于project，
~~~
\$ mkdir -p project\/gcc
\$ cp -v Makefile.config Makefile project\/gcc\/
~~~

== your 1st program : blinky

第一个例子很简单，是硬件调试中的 /hello, world/，我们直接用默认的*Makefile.config*即可，
~~~
\$ mkdir -p blinky\_example\/gcc
\$ cp -v Makefile.config Makefile blinky\_example\/gcc\/
\$ cd blinky\_example\/gcc\/
\$ make erase\-all
\$ make flash
~~~
所使用的依赖文件有，
~~~
\$ make echostuff
C\_OBJECTS: \[\_build/main.o \_build/nrf\_delay.o \_build/system\_nrf51.o\]
C\_SOURCE\_FILES: \[main.c nrf\_delay.c system\_nrf51.c\]
~~~
当然还有 gcc\_startup\_nrf51.s

== your 2nd program : ble\_hrs

对于第二个例子，由于我们用到了s110 SOC，因此，需要修改*Makefile.config*（或者可以直接使用*Makefile.config.ble*）
~~~
USE_SOFTDEVICE := s110
~~~
然后
~~~
\$ make clean
\$ make all
\$ make flash-softdevice
\$ make flash
~~~
Note that *make flash-softdevice* automatically erase-all the device.

