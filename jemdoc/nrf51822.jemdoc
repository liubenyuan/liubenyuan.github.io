# jemdoc: menu{MENU}{nrf51822.html}

= NRF51822 : Cortex-M0 + BLE stack, Dev in Linux.

# {}{where it is}{img file}{alt text}{Width}{Height}{}
~~~
{}{img_left}{pics/nrf51822ak.jpg}{NRF51822 AK II Board}{300px}{}{}

NRF51822 AK II 开发板，可以在[http://nrf51.taobao.com NRF51淘宝店]或者[http://www.nrf51.com NRF51开发者论坛]上购买或者询价。与nrf51822 DK/EK不同的是，这个板子不自带jlink调试器，因此，我们需要额外的购买jlink V8调试器来开发和调试ARM程序。需要注意的是，我们也可以将nrf51822理解成，搭载BLE蓝牙外设的Cortex-M0开发板：）

我们开发的环境是Linux，因此，相比较官方提供的keil，nrf51822 SDK，nrfgo的开发环境，需要较为繁琐的建立步骤。

*So, Let's Start!*
~~~

== jlink
从官方网站[http://www.segger.com/jlink-software.html?step=1&file=JLinkLinuxTGZ64_480]下载最新的Jlink程序，然后

~~~
{}{bash}
>> tar -xvf JLink_Linux_V480.tgz
>> cd JLink_Linux_V480
>> sudo cp 99-jlink.rules /etc/udev/rules.d/
>> cd ..
>> sudo mv JLink_Linux_V480 ~/bin/jlink
~~~

我们将jlink安装在了个人目录的bin目录下。安装完成后，需要重新连接jlink调试器，然后运行*JLinkExe*就会看到自动更新固件的信息以及链路上的设备信息，在这里应该是Cortex-M0。

== arm-none-eabi crosscompiler
这一步就是安装arm-none-eabi的交叉编译环境，在archlinux下，这一步很简单，只要去AUR找到[https://aur.archlinux.org/packages/arm-none-eabi/ arm-non-eabi]，然后再安装即可。你可以自己修改这个编译包，使用mentor的*sourcery codebench*的最新的交叉编译程序。

针对sourcery codebench，如果要手动安装，只需要将下载的压缩包解压，并且放在+\~\/bin\/+目录下即可。

另外一个选择是使用*ARM官方*的交叉编译工具，见[https://launchpad.net/gcc-arm-embedded]。在archlinux下，我们在AUR找到[https://aur.archlinux.org/packages/gcc-arm-none-eabi/ gcc-arm-none-eabi]，然后安装即可。但是官方的交叉编译工具我还没测试。

== Nordic nrf51822 SDK
当前，你可以下载最新的nrf51822的SDK，以及nordic的s110 softdevice（类比FPGA中的说法，我们可以称softdevice为有*API的软核*）。如果你购买的是nrf51822 AK开发板，那么可以去[http://www.nrf51.com nrf51论坛]下载。

== ARM 开发初探

作为一个新手，我对启动开发Cortex-M0加蓝牙的程序是很茫然的，我先前的所有经验都是在FPGA和ADSP上进行开发。现在，我们要一步的迁移到交叉编译环境加ARM与蓝牙上面。所幸，网上有很多相当优秀的教程，我列以下两个：

. 这个博客 [http://cms.mcuapps.com/tooltips/tt0004 mcuapps博客]
. 以及这个大牛 [http://balau82.wordpress.com/category/software/embedded-software balau82的博客]

=== Balau82的博客集锦

我们首先阅读Balau82的博客获取一些基础知识。

[http://balau82.wordpress.com/2010/02/14/simplest-bare-metal-program-for-arm/ Simplest bare metal program for ARM]. Bare Metal (裸机) 程序是无需操作系统即可运行的程式。学习裸机程序对于理解硬件架构以及操作系统的底层都很有帮助。我们在安装好arm-none-eabi工具(none即为bare metal的含义)后，将arm-none-eabi-\*添加到系统可执行路径中即可。

~~~
{}{img_left}{pics/balau82_20100214.png}{ARM bare metal}{300px}{}{}

nrf51822 AK开发板可以看作是cortex-M0架构下+最小+的开发板。最基本的源代码包括test.c，启动代码startup.s，链接配置test.ld。相应的交叉编译工具也可以在图中找到。+启动代码+最基本的功能就是在程序初始化端口，屏蔽中断，映射程序。+链接配置+则包含text，data以及堆栈的位置，或者说 /tells the linker where different memory sections map into real, physical memory on the chip/ 。针对cortex-M0架构，我们需好好理解启动代码（balau给出的例子并不是针对cortex-M0架构的，针对不同架构有不同的汇编语法），不要被复杂的.s程序所困扰，只要让程序运行起来即可。编程的深入离不开芯片的数据手册和DEMO板的硬件原理图。
~~~

[http://balau82.wordpress.com/2010/02/28/hello-world-for-bare-metal-arm-using-qemu/ Hello world for bare metal ARM using QEMU]. 我们可以用qemu和arm-none-eabi-gdb来调试程序。在这里，我们还是使用上面test.c的例子。运行

~~~
{}{bash}
$ arm-none-eabi-as -mcpu=arm926ej-s -g startup.s -o startup.o
$ arm-none-eabi-gcc -c -mcpu=arm926ej-s -g test.c -o test.o
$ arm-none-eabi-ld -T test.ld test.o startup.o -o test.elf
$ arm-none-eabi-objcopy -O binary test.elf test.bin
$ qemu-system-arm -M versatilepb -m 128M -nographic -s -S -kernel test.bin
~~~

随后在另一个终端中该目录下（需要有test.elf），
~~~
{}{bash}
$ arm-none-eabi-gdb
(gdb) target remote localhost:1234
(gdb) file test.elf
(gdb) b c_entry
(gdb) continue
(gdb) set $pc=0
(gdb) stepi
~~~
需要退出qemu的仿真，可以Ctrl+a, x。

[http://balau82.wordpress.com/2011/09/03/using-codesourcery-bare-metal-toolchain-for-cortex-m3/ Using CodeSourcery bare metal toolchain for Cortex-M3]. 之前的交叉编译的例子都是基于arm926ej-s，balau在本文中提供了针对cortex-m3的例子。Bare metal程式最大的用处是在MCU上，我直接复制了例子中的文件并且制作了makefile，在qemu上仿真一切OK，源代码可见 +main.c, syscalls.c, reset.S, lm3s6965.ld+ 。

~~~
{}{bash}
$ alias gcc-cortex-m3 = 'arm-none-eabi-gcc -mthumb -march=armv7 -mfix-cortex-m3-ldrd'
$ gcc-cortex-m3 -c main.c -o main.o
$ gcc-cortex-m3 -c reset.S -o reset.o
$ gcc-cortex-m3 -c syscalls.c -o syscalls.o
$ gcc-cortex-m3 -T lm3s6965.ld main.o reset.o syscalls.o -o main.elf
$ arm-none-eabi-objcopy -O binary main.elf main.bin
$ qemu-system-arm -M lm3s6965evb --kernel main.bin --serial stdio
~~~

我们也可以直接一步编译生成main.elf
~~~
{}{bash}
$ gcc-cortex-m3 -T lm3s6965.ld main.c reset.S syscalls.c -o main.elf
~~~

随后我们还要检查程序大小，初始化向量表（台湾的称呼为序列埠，很有意思），以及用MCU官方的工具对Flash进行擦写。问题是：针对cortex-m0的开发，我们需要怎样做呢？

== template for nrf51822

== your first program : blink, blink


